version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force    

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request GET https://api.memstash.io/values/migration
            echo ${SUCCESS}
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [frontend-test]
        - run:
            name: Frontend test
            command: |
              cd frontend
              npm install
              npm run test
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test
      #- slack/status
                
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      #- slack/status

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit --audit-level=critical
      #- slack/status

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend\
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text) 
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: e82f2c03-85db-4294-941c-178d1071af39" \
            --request PUT \
            --data $BACKEND_IP \
            https://api.memstash.io/values/backend_ip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - revert-migrations
      - destroy-environment     

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - attach_workspace:
            at: ~/project
        - add_ssh_keys:
            fingerprints: ["e1:68:97:12:76:12:94:b9:b7:5f:a4:f3:e1:d0:78:97"]
        - run:
            name: Install dependencies
            command: |
              apk add --update tar gzip ansible nodejs npm curl
              pip install awscli
        - run:
            name: Set up inventory file
            command: |
              cd .circleci/ansible
              URLS=$(curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request GET https://api.memstash.io/values/backend_ip)
              echo "$URLS" >> inventory.txt
              cat inventory.txt
        - run:
            name: Configure server with ansible
            no_output_timeout: 30m
            command: |
              echo ENVIRONMENT=production > "backend/.env"
              echo NODE_ENV=production >> "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - revert-migrations
        - destroy-environment   

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            export
            npm install
            npm run build
            touch mig_results.txt
            npm run migrations > mig_results.txt
            cat mig_results.txt
      - run:
          name: save migrations
          command: |
            cd backend
            if grep "has been executed successfully" mig_results.txt
            then
            echo "DB migration was successful"
            curl -H "Content-Type: text/plain" -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request PUT --data "true" https://api.memstash.io/values/migration
            DBWorkFlowID=$(curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request GET https://api.memstash.io/values/migration
            echo 'Migration Success Then Revert start workflow = ' $DBWorkFlowID;
            else
            echo "DB migration has failed"
            curl -H "Content-Type: text/plain" -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request PUT --data "false" https://api.memstash.io/values/migration
            fi
      - revert-migrations
      - destroy-environment   

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout   
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" \
                        --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            npm install webpack-dev-server -g
      - revert-migrations
      - destroy-environment 
                   
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e1:68:97:12:76:12:94:b9:b7:5f:a4:f3:e1:d0:78:97"]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl nodejs npm
            pip install awscli
      - run:
          name: install openssh
          command: |
            apk add openssh-client
      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar cvzf backend.tar.gz backend
            cd backend
            ls -ahl
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            echo $(curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" \
             --request GET https://api.memstash.io/values/backend_ip) >> ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
       # Rollback on failure  
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: warnerbros/node-awscli:12-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |  
            backendURL=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text) 
            URL="http://${backendURL}:3030/api/status"
            echo $URL
            curl $URL

      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com/#/employees"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
            return 0
            echo "Frontend smoke test OK"
            else
            return 1
            echo "Front end smoke test failed"
            fi
      #- revert-migrations
      #- destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum install -y tar gzip curl
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name udapeople-cloudfront-production \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
      - revert-migrations
      - destroy-environment


  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promote the new deployment and delete the old one
          command: |
              OldWorkflowID=`curl -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request GET https://api.memstash.io/values/OldWorkflowID`
              STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
              echo "oldWorkFlowID = $OldWorkflowID"
              echo "currentWorkFlowID = $CurrentWorkflowID"
              if [[ ${CurrentWorkflowID} != ${OldWorkflowID} ]]
              then
                echo "$OldWorkflowID!=$CurrentWorkflowID => deleting old version"
                aws s3 rm s3://udapeople-$OldWorkflowID --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-$OldWorkflowID
                aws cloudformation delete-stack --stack-name udapeople-frontend-$OldWorkflowID
              else
                echo "Stach with ID $OldWorkflowID does not exist"
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [deploy-backend, run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]